name: VNC1

on:
  workflow_dispatch:

jobs:
  secure-vnc:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Download and Install UltraVNC
        run: |
          $vncUrl = "https://www.uvnc.com/downloads/ultravnc/1.4.3.2/UltraVNC_1_4_3_2_X64_Setup.exe"
          $installerPath = "$env:TEMP\ultravnc.exe"
          
          Invoke-WebRequest -Uri $vncUrl -OutFile $installerPath
          # Silent install with server component only
          Start-Process -FilePath $installerPath -ArgumentList "/verysilent", "/norestart", "/components=server" -Wait
          Remove-Item $installerPath -Force
          Start-Sleep -Seconds 10

      - name: Configure UltraVNC with Plain Text Password
        run: |
          # UltraVNC stores password in plain text in ultravnc.ini
          $vncIniPath = "${env:ProgramFiles}\uvnc bvba\UltraVNC\ultravnc.ini"
          $vncPassword = "password"  # Your desired password
          
          # Create or update the INI file
          $iniContent = @"
[admin]
passwd=$vncPassword
passwd2=
[ultravnc]
passwd=$vncPassword
passwd2=
port=5900
"@
          $iniContent | Out-File -FilePath $vncIniPath -Encoding ASCII -Force
          
          # Configure firewall
          netsh advfirewall firewall delete rule name="VNC-Tailscale" protocol=TCP localport=5900 -ErrorAction SilentlyContinue
          netsh advfirewall firewall add rule name="VNC-Tailscale" dir=in action=allow protocol=TCP localport=5900

      - name: Disable Password Complexity Requirements
        run: |
          # Temporarily disable password complexity requirements
          secedit /export /cfg $env:TEMP\secpol.cfg
          (Get-Content $env:TEMP\secpol.cfg) -replace "PasswordComplexity = 1", "PasswordComplexity = 0" | Set-Content $env:TEMP\secpol.cfg
          secedit /configure /db $env:TEMP\secpol.sdb /cfg $env:TEMP\secpol.cfg
          Remove-Item $env:TEMP\secpol.cfg, $env:TEMP\secpol.sdb -Force -ErrorAction SilentlyContinue

      - name: Create User with Same Password
        run: |
          $fixedPassword = "password"
          $securePass = ConvertTo-SecureString $fixedPassword -AsPlainText -Force
          
          $userExists = Get-LocalUser -Name "VNC1" -ErrorAction SilentlyContinue
          if ($userExists) {
              Set-LocalUser -Name "VNC1" -Password $securePass
          } else {
              New-LocalUser -Name "VNC1" -Password $securePass -AccountNeverExpires
          }
          
          Add-LocalGroupMember -Group "Administrators" -Member "VNC1" -ErrorAction SilentlyContinue
          echo "VNC1_USER=VNC1" >> $env:GITHUB_ENV
          echo "VNC1_PASSWORD=password" >> $env:GITHUB_ENV

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY1 }} --hostname=gh-vnc-runner-$env:GITHUB_RUN_ID
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Start UltraVNC Service
        run: |
          # UltraVNC service name might be different
          Start-Service -Name "uvnc_service" -ErrorAction SilentlyContinue
          Start-Sleep -Seconds 5

      - name: Maintain Connection
        run: |
          Write-Host "`n=== VNC ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP:5900"
          Write-Host "Username: VNC1"
          Write-Host "Password: password"
          Write-Host "==================`n"
          
          while ($true) {
              Write-Host "[$(Get-Date)] VNC Active - Use Ctrl+C to terminate"
              Start-Sleep -Seconds 300
          }
