name: VNC

on:
  workflow_dispatch:

jobs:
  secure-vnc:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Download and Install TightVNC
        run: |
          $vncUrl = "https://www.tightvnc.com/download/2.8.81/tightvnc-2.8.81-gpl-setup-64bit.msi"
          $installerPath = "$env:TEMP\tightvnc.msi"
          
          Invoke-WebRequest -Uri $vncUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart", "ADDLOCAL=Server" -Wait
          Remove-Item $installerPath -Force
          
          # Wait for VNC service to be installed
          Start-Sleep -Seconds 10

      - name: Configure VNC Server
        run: |
          # Set VNC password (using password from GitHub Secrets)
          $vncPassword = "${{ secrets.VNC1_FIXED_PASSWORD }}"
          
          # TightVNC stores configuration in registry
          $vncRegPath = "HKLM:\SOFTWARE\TightVNC\Server"
          
          # Ensure registry path exists
          if (-not (Test-Path $vncRegPath)) {
              New-Item -Path $vncRegPath -Force
          }
          
          # Set VNC password (TightVNC uses encrypted format, but we'll set it directly)
          # Note: In production, you might want to use TightVNC's vncpwd utility to properly encrypt
          Set-ItemProperty -Path $vncRegPath -Name "Password" -Value $vncPassword -Force
          Set-ItemProperty -Path $vncRegPath -Name "PasswordViewOnly" -Value "" -Force
          
          # Configure VNC settings
          Set-ItemProperty -Path $vncRegPath -Name "RfbPort" -Value 5900 -Force
          Set-ItemProperty -Path $vncRegPath -Name "HttpPort" -Value 5800 -Force
          Set-ItemProperty -Path $vncRegPath -Name "AcceptRfbConnections" -Value 1 -Force
          Set-ItemProperty -Path $vncRegPath -Name "QueryConnect" -Value 0 -Force
          Set-ItemProperty -Path $vncRegPath -Name "QueryOnlyIfLoggedOn" -Value 0 -Force
          
          # Configure firewall for VNC
          netsh advfirewall firewall delete rule name="VNC-Tailscale"
          netsh advfirewall firewall add rule name="VNC-Tailscale" `
            dir=in action=allow protocol=TCP localport=5900
          netsh advfirewall firewall add rule name="VNC-HTTP-Tailscale" `
            dir=in action=allow protocol=TCP localport=5800

      - name: Create VNC User with Fixed Password
        run: |
          $fixedPassword = "${{ secrets.VNC_FIXED_PASSWORD }}"
          $securePass = ConvertTo-SecureString $fixedPassword -AsPlainText -Force
          
          $userExists = Get-LocalUser -Name "VNC" -ErrorAction SilentlyContinue
          if ($userExists) {
              Set-LocalUser -Name "VNC" -Password $securePass
              Write-Host "Updated existing VNC user password"
          } else {
              New-LocalUser -Name "VNC" -Password $securePass -AccountNeverExpires
              Write-Host "Created new VNC user"
          }
          
          Add-LocalGroupMember -Group "Administrators" -Member "VNC" -ErrorAction SilentlyContinue
          
          echo "VNC_USER=VNC" >> $env:GITHUB_ENV
          echo "VNC_PASSWORD=$fixedPassword" >> $env:GITHUB_ENV

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-vnc-runner-$env:GITHUB_RUN_ID
          
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Start VNC Server Service
        run: |
          # Start the TightVNC server service
          Start-Service -Name "tvnserver" -ErrorAction SilentlyContinue
          
          # Wait a moment for the service to start
          Start-Sleep -Seconds 5
          
          # Verify service is running
          $serviceStatus = Get-Service -Name "tvnserver" -ErrorAction SilentlyContinue
          if ($serviceStatus.Status -ne "Running") {
              Write-Error "VNC service failed to start"
              exit 1
          }
          Write-Host "VNC service started successfully"

      - name: Verify VNC Accessibility
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          
          # Test connectivity to VNC port
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 5900
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to VNC port 5900 failed"
              exit 1
          }
          Write-Host "VNC connectivity successful!"

      - name: Maintain Connection
        run: |
          Write-Host "`n=== VNC ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP:5900"
          Write-Host "Username: VNC"
          Write-Host "Password: **********"
          Write-Host "==================`n"
          Write-Host "Note: Use any VNC client to connect to the above address"
          Write-Host "Recommended clients: TightVNC, RealVNC, TigerVNC, or built-in macOS Screen Sharing"
          
          while ($true) {
              Write-Host "[$(Get-Date)] VNC Active - Use Ctrl+C in workflow to terminate"
              Start-Sleep -Seconds 300
          }
