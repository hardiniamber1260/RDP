name: VNC1

on:
  workflow_dispatch:

jobs:
  secure-vnc:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Download and Install TightVNC
        run: |
          $vncUrl = "https://www.tightvnc.com/download/2.8.81/tightvnc-2.8.81-gpl-setup-64bit.msi"
          $installerPath = "$env:TEMP\tightvnc.msi"
          
          Invoke-WebRequest -Uri $vncUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart", "ADDLOCAL=Server" -Wait
          Remove-Item $installerPath -Force
          
          # Wait for VNC service to be installed
          Start-Sleep -Seconds 10

      - name: Configure VNC Server Properly
        run: |
          # Use TightVNC's built-in utility to set the password properly
          $vncPassword = "${{ secrets.VNC1_FIXED_PASSWORD }}"
          
          # First stop the service if it's running
          Stop-Service -Name "tvnserver" -Force -ErrorAction SilentlyContinue
          
          # Use TightVNC's password utility to set the password properly
          $vncServerPath = "${env:ProgramFiles}\TightVNC"
          $vncPwdUtil = "$vncServerPath\vncpwd.exe"
          
          if (Test-Path $vncPwdUtil) {
              # Create a temporary file with the password
              $tempFile = "$env:TEMP\vncpasswd.txt"
              $vncPassword | Out-File -FilePath $tempFile -Encoding ASCII
              
              # Set the password using the utility
              Start-Process -FilePath $vncPwdUtil -ArgumentList "-o", "-f", "-p", $tempFile -Wait
              Remove-Item $tempFile -Force
              
              Write-Host "VNC password set successfully using vncpwd utility"
          } else {
              Write-Warning "vncpwd.exe not found, trying manual registry configuration"
              
              # Manual registry configuration (less reliable)
              $vncRegPath = "HKLM:\SOFTWARE\TightVNC\Server"
              if (-not (Test-Path $vncRegPath)) {
                  New-Item -Path $vncRegPath -Force
              }
              
              # For a simple password like "password", this might work
              # But it's better to use the utility
              Set-ItemProperty -Path $vncRegPath -Name "Password" -Value "83 8B 27 33 63 0E 0D 2B" -Force
              Set-ItemProperty -Path $vncRegPath -Name "PasswordViewOnly" -Value "" -Force
          }
          
          # Configure other VNC settings
          $vncRegPath = "HKLM:\SOFTWARE\TightVNC\Server"
          Set-ItemProperty -Path $vncRegPath -Name "RfbPort" -Value 5900 -Force
          Set-ItemProperty -Path $vncRegPath -Name "HttpPort" -Value 5800 -Force
          Set-ItemProperty -Path $vncRegPath -Name "AcceptRfbConnections" -Value 1 -Force
          Set-ItemProperty -Path $vncRegPath -Name "QueryConnect" -Value 0 -Force
          Set-ItemProperty -Path $vncRegPath -Name "QueryOnlyIfLoggedOn" -Value 0 -Force
          
          # Configure firewall for VNC
          netsh advfirewall firewall delete rule name="VNC-Tailscale" -ErrorAction SilentlyContinue
          netsh advfirewall firewall add rule name="VNC-Tailscale" `
            dir=in action=allow protocol=TCP localport=5900
          netsh advfirewall firewall add rule name="VNC-HTTP-Tailscale" `
            dir=in action=allow protocol=TCP localport=5800 -ErrorAction SilentlyContinue

      - name: Create VNC1 User with Fixed Password
        run: |
          $fixedPassword = "${{ secrets.VNC1_FIXED_PASSWORD }}"
          $securePass = ConvertTo-SecureString $fixedPassword -AsPlainText -Force
          
          $userExists = Get-LocalUser -Name "VNC1" -ErrorAction SilentlyContinue
          if ($userExists) {
              Set-LocalUser -Name "VNC1" -Password $securePass
              Write-Host "Updated existing VNC1 user password"
          } else {
              New-LocalUser -Name "VNC1" -Password $securePass -AccountNeverExpires
              Write-Host "Created new VNC1 user"
          }
          
          Add-LocalGroupMember -Group "Administrators" -Member "VNC1" -ErrorAction SilentlyContinue
          
          echo "VNC1_USER=VNC1" >> $env:GITHUB_ENV
          echo "VNC1_PASSWORD=$fixedPassword" >> $env:GITHUB_ENV

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY1 }} --hostname=gh-vnc-runner-$env:GITHUB_RUN_ID
          
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Start VNC Server Service and Verify
        run: |
          # Stop service first to ensure clean start
          Stop-Service -Name "tvnserver" -Force -ErrorAction SilentlyContinue
          Start-Sleep -Seconds 2
          
          # Start the TightVNC server service
          Start-Service -Name "tvnserver"
          
          # Wait for the service to start properly
          Start-Sleep -Seconds 5
          
          # Verify service is running
          $serviceStatus = Get-Service -Name "tvnserver"
          if ($serviceStatus.Status -ne "Running") {
              Write-Error "VNC service failed to start. Current status: $($serviceStatus.Status)"
              # Try to get more details
              Get-EventLog -LogName Application -Source "tvnserver" -Newest 5 -ErrorAction SilentlyContinue | Format-List
              exit 1
          }
          
          Write-Host "VNC service started successfully"
          
          # Check if VNC is listening on port 5900
          $listening = netstat -an | Select-String ":5900 " | Select-String "LISTENING"
          if (-not $listening) {
              Write-Warning "VNC not listening on port 5900. Checking all ports..."
              netstat -an | Select-String "LISTENING" | Where-Object { $_ -like "*59*" }
          } else {
              Write-Host "VNC is listening on port 5900"
          }

      - name: Verify VNC Accessibility
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          
          # Test connectivity to VNC port
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 5900
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to VNC port 5900 failed"
              exit 1
          }
          Write-Host "VNC connectivity successful!"

      - name: Maintain Connection with Troubleshooting Info
        run: |
          Write-Host "`n=== VNC ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP:5900"
          Write-Host "Username: VNC1"
          Write-Host "Password: **********"
          Write-Host "==================`n"
          
          # Display troubleshooting information
          Write-Host "Troubleshooting Info:"
          Write-Host "VNC Service Status: $(Get-Service -Name 'tvnserver' | Select-Object -ExpandProperty Status)"
          Write-Host "Port 5900 listening: $(netstat -an | Select-String ':5900 ' | Select-String 'LISTENING' | Measure-Object | Select-Object -ExpandProperty Count)"
          Write-Host "Tailscale status: $( & "$env:ProgramFiles\Tailscale\tailscale.exe" status --json | ConvertFrom-Json | Select-Object -ExpandProperty BackendState )"
          
          while ($true) {
              Write-Host "[$(Get-Date)] VNC Active - Use Ctrl+C in workflow to terminate"
              Start-Sleep -Seconds 300
          }
